//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Fruit", Namespace="http://schemas.datacontract.org/2004/07/GettingStartedLib")]
    [System.SerializableAttribute()]
    public partial class Fruit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddToList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddToListResponse")]
        GettingStartedClient.ServiceReference1.Fruit[] AddToList(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddToList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddToListResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> AddToListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ExtractFromList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ExtractFromListResponse")]
        GettingStartedClient.ServiceReference1.Fruit ExtractFromList(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/ExtractFromList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/ExtractFromListResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit> ExtractFromListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CountList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CountListResponse")]
        int CountList(GettingStartedClient.ServiceReference1.Fruit[] fruits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CountList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CountListResponse")]
        System.Threading.Tasks.Task<int> CountListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CreateFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CreateFruitResponse")]
        GettingStartedClient.ServiceReference1.Fruit CreateFruit(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CreateFruit", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CreateFruitResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit> CreateFruitAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CreateList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CreateListResponse")]
        GettingStartedClient.ServiceReference1.Fruit[] CreateList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/CreateList", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/CreateListResponse")]
        System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> CreateListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : GettingStartedClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<GettingStartedClient.ServiceReference1.ICalculator>, GettingStartedClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GettingStartedClient.ServiceReference1.Fruit[] AddToList(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit) {
            return base.Channel.AddToList(fruits, fruit);
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> AddToListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit) {
            return base.Channel.AddToListAsync(fruits, fruit);
        }
        
        public GettingStartedClient.ServiceReference1.Fruit ExtractFromList(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit) {
            return base.Channel.ExtractFromList(fruits, fruit);
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit> ExtractFromListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits, string fruit) {
            return base.Channel.ExtractFromListAsync(fruits, fruit);
        }
        
        public int CountList(GettingStartedClient.ServiceReference1.Fruit[] fruits) {
            return base.Channel.CountList(fruits);
        }
        
        public System.Threading.Tasks.Task<int> CountListAsync(GettingStartedClient.ServiceReference1.Fruit[] fruits) {
            return base.Channel.CountListAsync(fruits);
        }
        
        public GettingStartedClient.ServiceReference1.Fruit CreateFruit(string name) {
            return base.Channel.CreateFruit(name);
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit> CreateFruitAsync(string name) {
            return base.Channel.CreateFruitAsync(name);
        }
        
        public GettingStartedClient.ServiceReference1.Fruit[] CreateList() {
            return base.Channel.CreateList();
        }
        
        public System.Threading.Tasks.Task<GettingStartedClient.ServiceReference1.Fruit[]> CreateListAsync() {
            return base.Channel.CreateListAsync();
        }
    }
}
